function [PerfPermFoldCV, PerfPermFoldTS, models] = nk_CVPermFold(Y, nclass, ngroups, Ps, FilterSubSets, batchflag)
% =========================================================================
% FORMAT [PerfPermFoldCV, PerfPermFoldTS, models] = nk_CVPermFold2(Y, ...
%                                               nclass, ...
%                                               Ps, FilterSubSets,
%                                               batchflag
% =========================================================================
%
% nk_CVPermFold2 trains SVM classifiers for given CV2 training 
% data partition and applies these classifiers to CV2 test data
%
% INPUT:
% --------
% Y             = data in CV2 partition, consisting of ...:
%                 * Y.Tr = CV1 training data (training data) 
%                 * Y.CV = CV1 cross-validation data (optimization data)
%                 * Y.Ts = CV2 cross-validation data (validation data)
% nclass        = no. of binary dichotimizers
% Ps            = parameters for training the prediction algorithm
% FilterSubSets = Filtered features subsets
% batchflag     = print extended info to screen
%
% OUTPUT:
% -------
% PerfPermFoldCV    = a struct array containing the results of feature 
%                     extraction generated by the inner CV loop (CV1)
% PerfPermFoldTS    = a struct array with the prediction results of the
%                     validation sample (outer CV loop = CV2)
% models            = models returned by the optimization procedure of
%                     OptimCore
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% (c) Nikolaos Koutsouleris 12/2018

global RFE MULTILABEL BATCH CV

if ( ~exist('batchflag','var') || isempty(batchflag)) || isempty(BATCH), batchflag = false; BATCH = false; end;

curlabel = MULTILABEL.curdim;

% Step 1: Train classifier(s) in current outer partition
tPerfPermFoldCV = nk_TrainPermFold2(Y, nclass, ngroups, Ps, FilterSubSets{curlabel}, batchflag);

weights = []; detrendmd = [];

% Step 2: Get the trained models
if RFE.Wrapper.flag

    % Some wrapper algorithm was applied for feature extraction
    models  = tPerfPermFoldCV.Wrapper.Models;
    feats   = tPerfPermFoldCV.Wrapper.SubSpaces;
    if RFE.Wrapper.SubSpaceFlag,
        weights = tPerfPermFoldCV.Wrapper.Weights;
    end

    if isfield(tPerfPermFoldCV.Wrapper,'detrend')
        detrendmd = tPerfPermFoldCV.Wrapper.detrend;
    end

else%if RFE.Filter.flag

    % Ok, only filtering was applied 
    models  = tPerfPermFoldCV.Filter.Models;
    feats   = tPerfPermFoldCV.Filter.SubSpaces;
    if RFE.Filter.SubSpaceFlag,
        weights = tPerfPermFoldCV.Filter.Weights;
    end
    if isfield(tPerfPermFoldCV.Filter,'detrend')
        detrendmd = tPerfPermFoldCV.Filter.detrend;
    end
end

% Step 3: Now apply the trained model(s) to the CV2 test data
if ~isfield(Y,'mTsL'), mTsL = []; else mTsL = Y.mTsL; end

tPerfPermFoldTS = nk_PredictData(feats, weights, Y.Tr, Y.TrInd, Y.TrL, ...
                                                Y.CV, Y.CVInd, Y.CVL, ...
                                                Y.Ts, Y.TsInd, Y.TsL, ...
                                                [], mTsL, models, ngroups, detrendmd);

if MULTILABEL.dim>1
   PerfPermFoldCV{curlabel} = tPerfPermFoldCV; 
   PerfPermFoldTS{curlabel} = tPerfPermFoldTS; 
   if ~isempty(detrendmd)
        PerfPermFoldCV{curlabel}.detrend = detrendmd;
   end
else
   PerfPermFoldCV = tPerfPermFoldCV; 
   PerfPermFoldTS = tPerfPermFoldTS; 
   if ~isempty(detrendmd)
        PerfPermFoldCV.detrend = detrendmd;
   end
end




