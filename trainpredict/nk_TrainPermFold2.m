% =========================================================================
% FORMAT [performance, models] = nk_TrainPermFold2(Y, Ps, FilterSubSets, ...
%                                                   batchflag)
% =========================================================================
%
% INPUTS:
% -------
% Y :               Input data containing CV1-Training, CV1-Test and CV2-Test data,
%                   labels and indices generated by means of nk_Preprocess and
%                   nk_PerfPreprocessing
% nclass :          Number of classes (dichotomizers), in binary / regression 
%                   problems nclass = 1; otherwise nclass is defined by the
%                   one-vs-one method used to decompose multi-class problems
%                   into binary dichotomizations (an alternative approach
%                   is one-vs-all, which has shown to be inferior to
%                   the method used here)
% Ps :              Parameters used for training
% FilterSubSets :   Sequential feature subspace ranking generated by 
%                   nk_CreateSubSets
% 
% (GLOBALS :        nk_TrainPermFold depends on a number of other training
%                   parameters, which are specified as GLOBAL during
%                   initialization of the training process. See
%                   documentation for more information.)
% OUTPUTS:
% --------
% performance :     Structure containing training and test data measures
% models :          Trained machine learning models                  
% _________________________________________________________________________
% This is the main feature extraction routine of NeuroMiner. It is capable of
% employing both filter and wrapper methods for selecting the most relevant 
% features for classification and regression.
%
% Initially feature filtering is performed on the training data sets
% Classification / Regression performance of these feature subsets is estimated 
% using the nperms*fold CV test samples. Then, wrapper methods can be applied to
% the data to extract the most relevant features from these subsets. Model
% generation is strictly limited to each CV1 training & CV1 test sample 
% on the inner CV loop
%
% Subfunction(s):
% * OptimCore
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% (c) Nikolaos Koutsouleris 03/2020

function performance = nk_TrainPermFold2(Y, nclass, ngroups, Ps, FilterSubSets, batchflag)

global RFE BATCH VERBOSE SVM

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%% INITIALIZATION %%%%%%%%%%%%%%%%%%%%%%%%%%%%
[nperms, nfolds, nvar] = size(Y.Tr);

if ( ~exist('batchflag','var') || isempty(batchflag)) || isempty(BATCH), batchflag = false; BATCH = false; end;
%  %%%%%%%%%%%%%%%%%%%%%% FEATURE SUBSPACE SELECTION %%%%%%%%%%%%%%%%%%%%%%
    
% Perform some sort of feature selection (filter, wrapper or both)
Weighting = 0;
if isfield(RFE.Filter,'EnsembleStrategy') && isfield(RFE.Filter.EnsembleStrategy,'Weighting')
        Weighting = RFE.Filter.EnsembleStrategy.Weighting;
elseif isfield(RFE.Filter,'Weighting');
        Weighting = RFE.Filter.Weighting;
end

% Prepare I structure to input to OptimCore
I.Y         = Y;
I.ngroups   = ngroups;
I.nclass    = nclass;
I.nperms    = nperms;
I.nfolds    = nfolds;
I.nvar      = nvar;
I.F         = FilterSubSets;
I.Ps        = Ps;

if VERBOSE
    if RFE.Filter.flag
        fprintf('\n\nGenerate filter-based CV1 ensembles')
        fprintf('\n-----------------------------------')
    else
        fprintf('\n\nGenerate CV1 ensembles with full input feature space')
        fprintf('\n----------------------------------------------------')
    end
end
strout = 'CV1 Train'; OptMode = 0; 
performance.Filter = OptimCore(I, [], strout, RFE.Filter, OptMode, Weighting);

% Wrapping ?
if RFE.Wrapper.flag

    if VERBOSE
        fprintf('\n\nGenerate wrapper-based CV1 ensembles')
        fprintf('\n------------------------------------')
    end
    strout = [SVM.prog '-Wrapper']; OptMode = 1; 
    if RFE.Filter.flag,  I.F = performance.Filter.SubSpaces; end
    performance.Wrapper = OptimCore(I, [], strout, RFE.Wrapper, OptMode, Weighting);

end
    


