function [GridParam, modeflag] = nk_EvalFunc_config(res, param, parentstr) 
global EXPERT

modeflag = res.modeflag; deffunc = 1;
if exist('param','var') && ~isempty(param)
    if isfield(param,'evalfunc')
        deffunc = param.evalfunc;
    elseif isfield(param,'GridParam')
        deffunc = param.GridParam;
    end
    switch res.modeflag
        case 'classification'
            if EXPERT
                mn_act = [1 2 4 5 6 7 13 14 17 15 19 20];
                mn_str = [  'Accuracy [ sum(E~=P)*100/N ]|' ...
                            'True Positive Rate [ e.g. for one-class SVM ]|' ...
                            'False Positive Rate [ e.g. for one-class SVM ]|' ...
                            'Positive Predictive Value [ e.g. for one class SVM ]|' ...
                            'Matthews Correlation Coefficient [ (TP*TN-FP*FN) / sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN)) ]|' ...
                            'Area-Under-the-Curve [ AUC ]|' ...
                            'Geometric Mean [ sqrt(PPV*True Positive Rate) ]|' ...
                            'Balanced Accuracy [ (Sensitivity+Specificity)/2 ]|' ...
                            'Enhanced Balanced Accuracy [ (Sensitivity*Specificity)/100 ]|' ...
                            'F-score [ (1+beta2)*precision*recall / (beta2*(precision+recall)) * 100 ]|' ...
                            'Prognostic Summary Index [ PPV+NPV-100 ]|' ...
                            'Number Needed to Predict [1/PPV]'];
                
            else
                mn_act = [1 6 7 14 17 19 ];
                mn_str = [  'Accuracy [ sum(E~=P)*100/N ]|' ...
                            'Matthews Correlation Coefficient [ (TP*TN-FP*FN)/sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN)) ]|' ...
                            'Area-Under-the-Curve [ AUC ]|' ...
                            'Balanced Accuracy [ (Sensitivity+Specificity)/2 ]|'...
                            'Enhanced Balanced Accuracy [ (Sensitivity*Specificity)/100 ]|' ...
                            'Prognostic Summary Index [ PPV+NPV-100 ]' ];
            end
           
        case 'regression'
            if EXPERT
                mn_act = [9 11 10 16 18];
                mn_str = [  'Mean Squared Error (MSE) [ sum((P-E).*(P-E)) ]|' ...
                            'Normalized Root of Mean Squared Deviation [ sqrt(MSE)*100/range(E) ]|' ...
                            'Squared Correlation Coefficient (R^2) [ don''t use with Leave-One-Out ]|' ...
                            'Pearson Correlation Coefficient (R) [ don''t use with Leave-One-Out ] |' ...
                            'Mean Average Error [ mean(abs(P-E)) ]'];
            else
                mn_act = [9 10 18];
                mn_str = [  'Mean Squared Error [ sum((P-E).*(P-E)) ]|' ...
                        'Squared Correlation Coefficient (R^2) [ don''t use with Leave-One-Out ]|' ...
                        'Mean Average Error [ mean(abs(P-E)) ]'];
            end
           
    end
end
mn_def = find(mn_act==deffunc);
nk_PrintLogo
mestr = 'ML model performance criterion'; navistr = [parentstr ' >>> ' mestr]; cprintf('*blue','\nYou are here: %s >>>',parentstr);
GridParam = nk_input(mestr,0,'mq', mn_str, mn_act, mn_def);

if ~GridParam, GridParam = param.GridParam; end