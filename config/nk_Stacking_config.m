function [STACKING, act, mess] = nk_Stacking_config(STACKING, NMS, mess, parentstr)
global NM

act = 0; 

%% Set-up configuration interface
% Check the status of previous analyses 
if ~exist('NMS','var') || ...
        isempty(NMS) || ...
        ~isfield(NMS,'completed_analyses') || ...
        isempty(NMS.completed_analyses) || ...
        ~any(NMS.completed_analyses & NMS.isequalcv_analyses) && sum(NMS.nmodal_analyses)<2 , return; 
end
% Define variables
if ~exist('mess','var'), mess = []; end
na_str          = '?';
stk_flag        = 2;
pred_flag       = 2;
sel_anal        = [];
featname_edit   = na_str;
featname_mode   = 1;
source_anal     = NMS.completed_analyses;
isequalcv_anal  = NMS.isequalcv_analyses;
f_ind           = find(source_anal & isequalcv_anal); 
% Use Stacking?
if isfield(STACKING,'flag'),            stk_flag = STACKING.flag; else, STACKING.flag = stk_flag; end
% Lower-level prediction layer already defined?
if isfield(STACKING,'source_anal'),     
    source_anal = STACKING.source_anal;
    if numel(source_anal)~= numel(isequalcv_anal), source_anal = NMS.completed_analyses; STACKING.source_anal = source_anal; end
else, 
    STACKING.source_anal = source_anal; 
end
% Input analyses already selected?
if isfield(STACKING,'sel_anal'),        sel_anal = STACKING.sel_anal; else, STACKING.sel_anal = []; end
if isfield(STACKING,'featname_mode'),   featname_mode = STACKING.featname_mode; else, STACKING.featname_mode = featname_mode; end
switch featname_mode
    case 1
        if ~isempty(sel_anal)
            STACKING.featname_edit    = 'Automatic definition';
            featname_edit = STACKING.featname_edit;
            for m=1:numel(sel_anal)
                STACKING.featnames{m} = NM.analysis{sel_anal(m)}.id;
            end
        else
            STACKING.featname_edit = na_str; 
            STACKING.featnames = {[]};
        end
         
    case 2
        if isfield(STACKING,'featname_edit'),   
            featname_edit = STACKING.featname_edit; 
        else, 
            STACKING.featname_edit = na_str; 
            STACKING.featnames = {[]};
        end
end
if isfield(STACKING,'mode'),            pred_flag = STACKING.mode; else,  STACKING.mode = pred_flag;  end

mn_str = []; mn_act = [];
if ~stk_flag, stk_flag = 2; STACKING.flag = stk_flag; end
stackstr = {'enabled','disabled'};
predstr = {'CV1 training data','CV1 test data'};
featnamemodestr = {'Automatically','Manually'};

mn_str = [mn_str sprintf('Activating stacking using prediction generated by other analyses [ %s ]',stackstr{stk_flag})];
mn_act = [mn_act 1];

if stk_flag == 1
    if ~isempty(sel_anal)
        if numel(sel_anal)>1
            a_str = num2str(sel_anal,'%g, '); a_str=a_str(1:end-1);
            sel_anal_str = sprintf('Analyses %s', a_str);
        else
            sel_anal_str = sprintf('Analysis %g',sel_anal);
        end
    else
        sel_anal_str = na_str;
    end
    mn_str = [ mn_str sprintf('|Select 1st-level analyses to provide features to stacker [ %s ]', sel_anal_str) ];
    mn_act = [ mn_act 2 ];
    
    if ~isempty(sel_anal)  
        nF_str ='';
        mn_str = [ mn_str sprintf('|Extraction of feature names for the stacker [ %s ]', featnamemodestr{featname_mode}) ]; mn_act = [ mn_act 3 ];
        if featname_mode == 2
            if ~strcmp(featname_edit,na_str),
                try 
                    featnames = evalin('base',featname_edit);
                    if ~iscell(featnames)
                        mess = GenerateMessageEntry(mess,'ERROR: a cell array of strings is required to define the feature names');
                    end
                    nF = numel(featnames) ; nF_str = sprintf(' (No. features: %g) ',nF);
                    if nF ~= sum(NMS.nmodal_analyses(sel_anal))
                         mess = GenerateMessageEntry(mess,...
                             sprintf('ERROR: Number of entries in the cell array (%g) has to match number of features (%g) entering the stacker',...
                             numel(featnames),sum(NMS.nmodal_analyses(sel_anal))));
                    end
                    STACKING.featnames = featnames;
                catch ERR
                    STACKING.featnames = {[]}; 
                    mess = GenerateMessageEntry(mess, ...
                      sprintf('ERROR: feature names could not be extracted from ''%s'' .\nError message: %s (%s)\nFunction:%s, Line: %g', ...
                        featname_edit, ERR.message, ERR.identifier, ERR.stack(1).name, ERR.stack(1).line)); 
                end
            end
            featname_edit_str = sprintf('Var ''%s''%s',featname_edit, nF_str);
            mn_str = [ mn_str sprintf('|Extract feature names manually [ %s ]', featname_edit_str) ]; mn_act = [ mn_act 4 ];
        end
        mn_str = [ mn_str sprintf('|Extract predictions from ... [ %s ]', predstr{pred_flag})]; mn_act = [ mn_act 5 ];
    end
end
nk_PrintLogo

if ~isempty(mess)
    for i=1:numel(mess)
        if isempty(mess(i).text), continue; end
        fprintf('\n');mess(i).text = regexprep(mess(i).text,'\','/');
        cprintf(mess(i).format,mess(i).text); 
    end
    fprintf('\n')
    mess = [];
end

fprintf('\n'); mestr = 'Configure stacking options';  
navistr = sprintf('%s\n\t>>> %s',parentstr, mestr); cprintf('*blue','You are here: %s >>> ',parentstr); 
act = char(nk_input(mestr,0,'mq', mn_str, mn_act));

switch act
    case 1
        if STACKING.flag == 1,  
            STACKING.flag = 2;
        elseif STACKING.flag == 2,
            STACKING.flag = 1;
        end
        
    case 2
        fprintf('\n')
        cprintf('black*','Select analyses')
        fprintf('\n=================')
        for i=1:numel(f_ind)
            if isfield(NM.analysis{f_ind(i)},'id')
                idstr = NM.analysis{f_ind(i)}.id;
            else
                idstr = '';
            end
            fprintf('\n'); cprintf('black*','[ Analysis %g ] ID: %s', f_ind(i), idstr);  
        end
        STACKING.sel_anal = nk_input('Select analyses to provide input features to stacker',0,'i',sel_anal);
    case 3
        STACKING.featname_mode = nk_input('Extract feature names',0,'m','Automatically (Using IDs of selected analyses)|Manually from a variable in the MATLAB workspace',[1 2], featname_mode);
        if STACKING.featname_mode == 2
            STACKING.featname_edit = na_str;
        else
            STACKING.featname_edit = 'Automatic definition';
        end
    case 4
        STACKING.featname_edit = nk_input('Define variable in MATLAB workspace containg the names of the features entering the stacker',0,'s',featname_edit);
    case 5
        STACKING.mode = nk_input('Extract prediction from ...',0,'m','CV1 training data (only useful for weak learners)|CV1 test data',[1 2], pred_flag);
end