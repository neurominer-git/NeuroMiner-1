function param = nk_Kernel_config(param, defaultsfl, translatefl)

if isfield(param,'kernel')
    kerndef = param.kernel.kerndef;
else
    kerndef = 1;
end
if ~exist('defaultsfl','var') || isempty(defaultsfl), defaultsfl=0; end
if ~exist('translatefl','var') || isempty(translatefl), translatefl=0; end

switch param.prog

    case {'MikRVM','FAMRVR'}
        
        kerndesc = {'Linear',...
                    'Gaussian',...
                    'Exponential',...
                    'Laplacian',...
                    'Polynomial of order N',...
                    'Homogeneous polynomial of order N',...
                    'Linear spline',...
                    'Cauchy (heavy tailed) in distance',...
                    'Cubic (cube of distance)',...
                    'Distance',...
                    'Thin plate spline',...
                    'Neighbourhood indicator'};
        kernmenu = ['Linear|'...
                    'Gaussian|' ...
                    'Exponential|' ...
                    'Laplacian|' ...
                    'Polynomial of order N|' ...
                    'Homogeneous polynomial of order N|' ...
                    'Linear spline|' ...
                    'Cauchy (heavy tailed) in distance|' ...
                    'Cubic (cube of distance)|' ...
                    'Distance|' ...
                    'Thin plate spline|' ...
                    'Neighbourhood indicator|'];
        kernnum = 1:12;
        kernstr = { 'lin', ...      % Linear kernel (dot product)
                    'rbf', ...      % Radial Basis functions
                    'expo', ...     % Exponential
                    'laplace', ...  % Laplacian
                    'polyN', ...    % Polynomial of order 'N'
                    'hpolyN', ...   % Homogeneous Polynomial of order 'N'
                    'spline', ...   % Linear spline [Vapnik et al]
                    'cauchy', ...   % Cauchy (heavy tailed) in distance
                    'cubic', ...    % Cube of distance
                    'r', ...        % Distance
                    'tps', ...      % 'Thin-plate' spline
                    'bubble'};      % Neighbourhood indicato}
        progstr = 'Mike Tipping''s RVM';
                
    case 'LIBSVM'
                
        switch param.LIBSVM.LIBSVMver
            case {0,1,2}
                kerndesc = { 'Linear',...
                             'Polynomial',...
                             'RBF (Gaussian)',...
                             'Sigmoid'};
                kernmenu = [ 'Linear|' ...
                             'Polynomial|' ...
                             'RBF (Gaussian)|' ...
                             'Sigmoid|' ];
                kernnum = 1:4;
                kernstr = {' -t 0',' -t 1',' -t 2',' -t 3'};
                
            case 3
                
                kerndesc = { 'Linear',...
                             'Polynomial',...
                             'Gaussian',...
                             'Sigmoid',...
                             'Stump',...
                             'Perceptron',...
                             'Laplacian',...
                             'Exponential'};
                
                kernmenu = [ 'Linear|' ...
                             'Polynomial|' ...
                             'Gaussian|' ...
                             'Sigmoid|' ...
                             'Stump|' ...
                             'Perceptron|' ...
                             'Laplacian|' ...
                             'Exponential|'];
                kernnum = 1:8;       
                kernstr = {' -t 0',' -t 1',' -t 2',' -t 3',' -t 4',' -t 5',' -t 6',' -t 7'};
        end
         progstr = 'LIBSVM';
        
      case {'MKLRVM','MVTRVR'}
          
         kernmenu = ['Linear|'...
                     'Polynomial|' ...
                     'Gaussian'];
         kernnum = 1:3;
         kernstr = {'linear', ...
                    'polynomial', ...
                    'gaussian'};
         kerndesc = kernstr;
         progstr = 'Multiple Kernel Learning RVM';
      
      case 'LSTSVM'
        kernmenu = ['Linear|'...
                     'RBF (Gaussian)'];
        kernnum = 1:2;
        kernstr = {'lin_kernel', ...
                    'RBF_kernel'};
        kerndesc = kernstr;
        progstr = 'Least squares-SVM (LS-SVM)';
        
     case 'BLOREG'
        kernmenu = ['No Kernel|', ...
                     'Linear|'...
                     'Polynomial|', ...
                     'Gaussian'];
                 
        kernnum = 1:4;
          
        kernstr = {'none', ...
                    'lin', ...
                    'poly', ...
                    'gauss'};
                
                kerndesc = kernstr;
                
        progstr = 'Sparse Bayesian Logistic Regression';
        
    case 'MEXELM'
        kernnum(1) = 1;
        kernstr = 'lin_elm';
        kerndesc{1} = 'linear';
    
    otherwise
        kerndesc = {'No Kernel'};
        kernstr = 'lin';
        kernnum = 1; 
        
end

if numel(kernnum) > 1 
    if defaultsfl
         % Set per default to linear kernel
         kerndef = 1; kerndesc{1} = 'linear';
    else
        % Ask user which kernel to use
        kerndef = nk_input(['Select kernel type for ' progstr ], 0, 'mq', kernmenu, kernnum, kerndef);
    end
    if kerndef
        param.kernel.kerndef = kerndef;
        param.kernel.kernstr = kernstr{param.kernel.kerndef};
        %param = nk_PolyKernel_config(param);
        param.kernel.kerndesc = kerndesc{param.kernel.kerndef};
    end
else
    param.kernel.kerndesc = kerndesc{1};
    param.kernel.kerndef = kernnum(1);
    param.kernel.kernstr = kernstr;
end
